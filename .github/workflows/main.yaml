name: Test, Build, Push Docker Image and Release Helm Chart

on:
  push:
    branches: [main, master]
  workflow_dispatch:

jobs:
  perform_unit_tests:
    name: 🧪 Run Unit Tests
    runs-on: ubuntu-latest    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2  

      - name: Set up Python
        uses: actions/setup-python@v2  

      - name: Install Dependencies
        run: pip install -r app/requirements.txt 

      - name: Run Tests
        run: python app/test_app.py

  build_and_push_to_docker_hub:
    name: 🐳 Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: perform_unit_tests
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Log in to Docker Hub
        run:  docker login -u "${{ secrets.DOCKER_USERNAME }}" --password "${{ secrets.DOCKER_PASSWORD }}"

      - name: Build Docker Image
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/flask-app:v1.0.0 -f app/Dockerfile app

      - name: Get Latest Version Tag
        id: get_version
        run: |
          git fetch --tags
          latest_tag=$(git tag --sort=-v:refname | head -n 1)
          echo "Latest tag: $latest_tag"
          if [[ "$latest_tag" =~ ^v([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
            major=${BASH_REMATCH[1]}
            minor=${BASH_REMATCH[2]}
            patch=${BASH_REMATCH[3]}
            new_tag="v${major}.${minor}.$((patch + 1))"
          else
            new_tag="v1.0.0"
          fi
          echo "NEW_TAG=$new_tag" >> $GITHUB_ENV

      - name: Create Git Tag
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"
          git tag ${{ env.NEW_TAG }}
          git push origin ${{ env.NEW_TAG }}  

      - name: Push Docker Image
        run: docker push ${{ secrets.DOCKER_USERNAME }}/flask-app:v1.0.0

  release_helm_chart:
    name: 🚀 Release Helm Chart
    runs-on: ubuntu-latest
    needs: build_and_push_to_docker_hub
    permissions:
      contents: write
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

      - name: Install Helm
        uses: azure/setup-helm@v3

      - name: Run Chart Releaser
        uses: helm/chart-releaser-action@v1.5.0    
        env:
          CR_TOKEN: "${{ secrets.GITHUB_TOKEN }}" 
          CR_SKIP_EXISTING: true
